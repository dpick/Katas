A Diverson

At my son's karate school, they spend most of their time doing various
exercises, with the occasional round of sparring thrown in. But every
now and then the teacher finds a way to break the routine by injecting
some kind of game or surprise into the mix. This kata is one of those.
It's nothing serious, and unlikely to have practical benefits (unless
you're working in some fairly specialized areas).
Think of binary numbers: sequences of 0's and 1's. How many n-digit
binary numbers are there that don't have two adjacent 1 bits? For
example, for three-digit numbers, five of the possible eight
combinations meet the criteria: 000, 001, 010, 011, 100, 101, 110, 111.
What is the number for sequences of length 4, 5, 10, n?

Having worked out the pattern, there's a second part to the question:
can you prove why that relationship exists?

----------------------------------------------------------------------

Data Munging

Martin Fowler gave me a hard time for KataTwo, complaining that it was
yet another single-function, academic exercise. Which, or course, it
was. So this week let’s mix things up a bit.

Here’s an exercise in three parts to do with real world data. Try hard
not to read ahead—do each part in turn.

Part One: Weather Data

In weather.dat you’ll find daily weather data for Morristown, NJ for
June 2002. Download this text file, then write a program to output the
day number (column one) with the smallest temperature spread (the
maximum temperature is the second column, the minimum the third column).

Part Two: Soccer League Table

The file football.dat contains the results from the English Premier
League for 2001/2. The columns labeled ‘F’ and ‘A’ contain the total
number of goals scored for and against each team in that season (so
Arsenal scored 79 goals against opponents, and had 36 goals scored
against them). Write a program to print the name of the team with the
smallest difference in ‘for’ ite a program to output the day number
(column one) with the smallest temperature spread (the maximum
temperature is the second column, the minimum the third column).

Part Two: Soccer League Table

The file football.dat contains the results from the English Premier
League for 2001/2. The columns labeled ‘F’ and ‘A’ contain the total
number of goals scored for and against each team in that season (so
Arsenal scored 79 goals agait?
Is factoring out as much common code as possible always a good thing?
Did the readability of the programs suffer because of this requirement?
How about the maintainability?)

----------------------------------------------------------------------

Anagrams

Back to non-realistic coding this week (sorry, Martin). Let's solve some crossword puzzle clues.

In England, I used to waste hour upon hour doing newspaper crosswords. As crossword fans will know, English cryptic crosswords have a totally different feel to their American counterparts: most clues involve punning or word play, and there are lots of anagrams to work through. For example, a recent Guardian crossword had:

  Down:
    ..
    21. Most unusual form of arrest (6)
The hint is the phrase ‘form of,’ indicating that we’re looking for an anagram. Sure enough ‘arrest’ has six letters, and can be arranged nicely into ‘rarest,’ meaning ‘most unusual.’ (Other anagrams include raster, raters, Sartre, and starer)

A while back we had a thread on the Ruby mailing list about finding anagrams, and I’d like to resurrect it here. The challenge is fairly simple: given a file containing one word per line, print out all the combinations of words that are anagrams; each line in the output contains all the words from the input that are anagrams of each other. For example, your program might include in its output:

  kinship pinkish
  enlist inlets listen silent
  boaster boaters borates
  fresher refresh
  sinks skins
  knits stink
  rots sort

If you run this on the word list here you should find 2,530 sets of anagrams (a total of 5,680 words). Running on a larger dictionary (about 234k words) on my OSX box produces 15,048 sets of anagrams (including all-time favorites such as actaeonidae/donatiaceae, crepitant/pittancer, and (for those readers in Florida) electoral/recollate).

For added programming pleasure, find the longest words that are anagrams, and find the set of anagrams containing the most words (so "parsley players replays sparely" would not win, having only four words in the set).

Kata Objectives

Apart from having some fun with words, this kata should make you think somewhat about algorithms. The simplest algorithms to find all the anagram combinations may take inordinate amounts of time to do the job. Working though alternatives should help bring the time down by orders of magnitude. To give you a possible point of comparison, I hacked a solution together in 25 lines of Ruby. It runs on the word list from my web site in 1.5s on a 1GHz PPC. It’s also an interesting exercise in testing: can you write unit tests to verify that your code is working correctly before setting it to work on the full dictionary.

